{"version":3,"file":"./bundle.js","mappings":"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","sources":["webpack://tictactoe-2.0/./js/draw.js","webpack://tictactoe-2.0/./js/gameLogic.js","webpack://tictactoe-2.0/./js/main.js"],"sourcesContent":["import {\n    win,\n    getIndexesOfTheWinningStrategy,\n    k,\n\n} from './gameLogic';\n\n\nexport function drawSymbol(symbol) {\n    symbol.classList.remove('hidden');\n};\n\nexport function paintOverWinCells(indexArr, playingField) {\n\n    let rows = playingField.children;\n\n    for (const coord of indexArr) {\n        let cell = rows[coord[0]].children[coord[1]];\n        cell.classList.add('paint__over-green');\n    }\n\n\n}\n\nexport function paintOverAllCells(playingField) {\n    // playingField.children[0].children[0].style.backgroundColor = 'yellow';\n\n}\n\n\nexport function isPaintOverAllWinCells(arr, arrTransponse, playingField, k) {\n\n    if (getIndexesOfTheWinningStrategy(arr, arrTransponse, k)) {\n\n        paintOverWinCells(getIndexesOfTheWinningStrategy(arr, arrTransponse, k), playingField);\n\n        return win = true;\n\n    } else {\n\n        return false;\n\n    }\n};\n\n","import {\n    drawSymbol,\n    isPaintOverAllWinCells,\n    paintOverWinCells,\n\n} from './draw';\n\nconst crossWins = document.querySelector('.game-score-for-cross');\nconst zerosWins = document.querySelector('.game-score-for-zeros');\nconst playerMoveNumber = document.querySelector('.player__move-number');\n\nconst templateZero = '<img class=\"image-symbol zero-img\" src=\"images/zero.png\" alt=\"zero\">';\nconst templateCross = '<img class=\"image-symbol cross-img\" src=\"images/cross.png\" alt=\"cross\">';\n\nexport let n = 0;\nexport let k = 0;\n\nlet moveNumber = 0,\n    winCounterForCross = 0,\n    winCounterForZeros = 0,\n    drawCondition = 0;\n\nexport let win = false;\n\nexport const resetWinCounter = () => {\n    winCounterForCross = 0;\n    winCounterForZeros = 0;\n    zerosWins.innerHTML = '0';\n    crossWins.innerHTML = '0';\n}\n\nexport function resetPlayingField(playingField, gameMenu) {\n    playingField.innerHTML = '';\n    gameMenu.classList.add('hidden');\n    win = false;\n    moveNumber = 0;\n};\n\nexport function resetPlayingMatrix(arr) {\n    for (let i = 0; i < arr.length; i++) {\n\n        resetRow(arr[i]);\n    }\n    return arr;\n};\nfunction resetRow(row) {\n    for (let i = 0; i < row.length; i++) {\n        row[i] = 0;\n    }\n    return row;\n};\n\nexport function resetGameCells(playingField) {\n\n    win = false;\n    for (const row of playingField.children) {\n        for (const cell of row.children) {\n            cell.innerHTML = '';\n            cell.className = 'cell';\n        }\n    }\n    moveNumber = 0;\n    playerMoveNumber.innerHTML = 'Ходят крестики ❌';\n\n}\n\nexport function createMatrix(n) {\n    var result = [];\n\n    for (var i = 0; i < n; i++) {\n        result.push(new Array(n).fill(0));\n    }\n    return result;\n\n};\n\nfunction transposeMatrix(m) {\n    return m[0].map((x, i) => m.map(x => x[i]));\n}\n\nfunction getIndexWinRightDiagonal(arr) {\n\n    let indexWinCells = [[], [], []];\n    let indexForCell = [];\n\n    let j = 0;\n    for (let i = 0; i < arr.length; i++) {\n\n        if (arr[i][j] === 1) {\n\n            indexWinCells[i][0] = i;\n            indexWinCells[i][1] = j;\n            j++;\n\n        } else {\n            return indexWinCells = null;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        indexForCell[i] = indexWinCells[i].join('');\n\n    }\n\n    return indexForCell;\n}\n\nfunction getIndexWinLeftDiagonal(arr) {\n\n    let indexWinCells = [[], [], []];\n    let indexForCell = [];\n\n    let j = 0;\n    for (let i = 2; i < arr.length; i--) {\n\n        if (i === -1) {\n            break;\n        }\n\n        if (arr[i][j] === 1) {\n\n            indexWinCells[i][0] = i;\n            indexWinCells[i][1] = j\n            j++;\n\n        } else {\n            return indexWinCells = null;\n        }\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        indexForCell[i] = indexWinCells[i].join('');\n\n    }\n\n    return indexForCell;\n}\n\n\nfunction сheckIfWinningRow(row, k) {\n\n    let indexRowI = [];\n    let counter = 0;\n\n    for (let i = 0; i < row.length; i++) {\n        \n\n        if (row[i] === 0) {\n            counter = 0;\n            indexRowI = [];\n            continue;\n        }\n        if (row[i] === 1) {\n            counter++;\n            indexRowI.push(i);\n\n        }\n        if (counter === k) {\n\n            \n            return indexRowI;\n\n        }\n        // else {\n\n        //     return indexRowI = null;\n\n        // }\n    }\n\n    return null;\n\n}\n\n/**\n * \n * @param {Array} arr \n * @returns \n */\nfunction getIndexWinRow(arr, k) {\n\n    let indexRow = [];\n    let indexJ = -1;\n\n    arr.forEach((el, i) => {\n        let indArr = сheckIfWinningRow(el, k);\n        \n\n        if (indArr) {\n            \n            indexRow = indArr;\n            indexJ = i;\n        }\n    });\n\n    if (indexJ == -1) {\n        return indexRow = null;\n    }\n\n    arr.forEach((el, i) => {\n        indexRow[i] = [indexJ, indexRow[i]];\n        //indexRow[i] = indexRow[i].split('').map(Number);\n    });\n    \n    return indexRow;\n};\n\n/**\n * \n * @param {Array} arr \n * @returns \n */\nfunction getIndexWinColumn(arrTransponse, k) {\n\n    let indexRow = [];\n    let indexJ = -1;\n\n    arrTransponse.forEach((el, i) => {\n        if (сheckIfWinningRow(el, k)) {\n            indexRow = сheckIfWinningRow(el, k);\n            indexJ = i;\n        }\n    });\n\n    if (indexJ == -1) {\n        return indexRow = null;\n    }\n\n    arrTransponse.forEach((el, i) => {\n        indexRow[i] += `${indexJ}`;\n        indexRow[i] = indexRow[i].split('').map(Number);\n    });\n\n    return indexRow;\n\n};\n\nexport function getIndexesOfTheWinningStrategy(arr, arrTransponse, k) {\n\n    let indexArr = [];\n\n    if (getIndexWinLeftDiagonal(arr)) {\n\n        return indexArr = getIndexWinLeftDiagonal(arr);\n\n    } else if (getIndexWinRightDiagonal(arr)) {\n\n        return indexArr = getIndexWinRightDiagonal(arr);\n\n    } else if (getIndexWinRow(arr, k)) {\n\n        return indexArr = getIndexWinRow(arr, k);\n\n    } else if (getIndexWinColumn(arrTransponse, k)) {\n\n        return indexArr = getIndexWinColumn(arrTransponse, k);\n\n    }\n\n}\n\n\nexport function updateСell(event, i, j, fieldOfСrosses, fieldOfZeros, playingField, k) {\n\n    if (win === true) {\n        return;\n    }\n    \n    let target = event.target;\n\n    if(target.classList.contains('active-cell') || target.classList.contains('image-symbol')){\n        return;\n    }\n\n    if (moveNumber) {\n        target.innerHTML = templateZero;\n        fieldOfZeros[i][j] = 1;\n        playerMoveNumber.innerHTML = 'Ходят крестики ❌';\n    } else {\n        target.innerHTML = templateCross;\n        fieldOfСrosses[i][j] = 1;\n        playerMoveNumber.innerHTML = 'Ходят нолики ⭕';\n    }\n\n    target.classList.add('active-cell');\n    moveNumber = !moveNumber;\n\n    let fieldOfСrossesTranspone = transposeMatrix(fieldOfСrosses);\n    let fieldOfZerosTranspone = transposeMatrix(fieldOfZeros);\n\n    if (isPaintOverAllWinCells(fieldOfСrosses, fieldOfСrossesTranspone, playingField, k) === true) {\n\n        playerMoveNumber.innerHTML = 'Победили крестики!';\n        winCounterForCross++;\n        crossWins.innerHTML = `${winCounterForCross}`;\n        // win = true;\n\n\n    } else if (isPaintOverAllWinCells(fieldOfZeros, fieldOfZerosTranspone, playingField, k) === true) {\n\n        playerMoveNumber.innerHTML = 'Победили нолики!';\n        winCounterForZeros++;\n        zerosWins.innerHTML = `${winCounterForZeros}`;\n        // win = true;\n\n    } /*else {\n        \n        drawCondition++;\n        \n        if (drawCondition === 9) {\n            playerMoveNumber.innerHTML = 'Ничья!';\n            \n            paintOverAllCells(playingField);\n        }\n    }*/\n    \n    \n\n}\n","import {\n    resetWinCounter,\n    resetPlayingField,\n    createMatrix,\n    updateСell,\n    resetPlayingMatrix,\n    resetGameCells,\n    n,\n    k,\n} from './gameLogic';\n\n\nexport const playingField = document.querySelector('.playing__field');\n\nconst gameMenu = document.querySelector('.menu-section');\n\nconst cell = document.querySelector('#cell');\n\nconst playButton3x3 = document.querySelector('.button-play-3x3');\nconst playButtonNxN = document.querySelector('.button-play-NxN');\nconst buttonPlayAgain = document.querySelector('.button-play-again');\nconst restartButton = document.querySelector('.img-restart');\n\nconst conditionForNxN = document.querySelector('.condition-for-NxN');\nconst goButton = document.querySelector('.btn-go')\n\n\nlet fieldOfСrosses = [];\nlet fieldOfZeros = [];\n\n/**\n * Функция для работы с табами\n * @param {*} btn \n * @returns \n */\nfunction makeTabActive(btn) {\n    const menu = document.querySelector('.menu-list');\n    const activeBtn = menu.querySelector('.active');\n    \n    if (btn.classList.contains('active-game')) {\n        btn.classList.toggle('active-game');\n        return;\n    }\n\n    if (activeBtn) {\n        resetPlayingField(playingField, gameMenu);\n\n        if (btn === activeBtn) {\n            activeBtn.classList.remove('active');\n            return;\n        }\n        else {\n            activeBtn.classList.remove('active');\n            btn.classList.add('active')\n            //makeButtonActive(btn);\n        }\n\n    } else {\n        btn.classList.add('active')\n        //makeButtonActive(btn);\n    }\n}\n\nfunction createPlayingField(playingField, n, cell, k, btn) {\n    fieldOfСrosses = createMatrix(n);\n    fieldOfZeros = createMatrix(n);\n\n\n    for (let i = 0; i < n; i++) {\n\n        let tr = document.createElement('tr');\n\n        for (let j = 0; j < n; j++) {\n\n            let td = cell.content.cloneNode(true).firstElementChild;\n\n            td.dataset.index = `${i}${j}`;\n\n            tr.appendChild(td)\n\n\n            td.addEventListener('click', (event) => updateСell(event, i, j, fieldOfСrosses, fieldOfZeros, playingField, k));\n\n        }\n        playingField.appendChild(tr);\n\n\n    };\n\n    gameMenu.classList.remove('hidden');\n\n};\n\nplayButton3x3.addEventListener('click', (e) => {\n    //  controlActiveBtn(e.target);\n    k = 3;\n    createPlayingField(playingField, 3, cell, k, e.target);\n    makeTabActive(e.target);\n    conditionForNxN.classList.add('hidden');\n});\n\n\nplayButtonNxN.addEventListener('click', (e) => {\n\n    resetPlayingField(playingField, gameMenu);\n    makeTabActive(e.target);\n    conditionForNxN.classList.toggle('hidden');\n\n});\n\ngoButton.addEventListener('click', () => {\n\n    n = + document.querySelector('.input-for-N').value;\n    k = + document.querySelector('.input-for-K').value;\n\n    if (n == 0 || k == 0) {\n        alert('Некорректные данные!')\n        return;\n    }\n\n    conditionForNxN.classList.add('hidden');\n    playButtonNxN.classList.add('active-game');\n\n    createPlayingField(playingField, n, cell, k, playButtonNxN);\n})\n\nrestartButton.addEventListener('click', () => {\n\n    restartButton.classList.toggle('rotate');\n    resetWinCounter();\n\n});\n\nbuttonPlayAgain.addEventListener('click', () => {\n\n    fieldOfСrosses = resetPlayingMatrix(fieldOfСrosses);\n    fieldOfZeros = resetPlayingMatrix(fieldOfZeros);\n\n    resetGameCells(playingField);\n\n});"],"names":["isPaintOverAllWinCells","arr","arrTransponse","playingField","k","getIndexesOfTheWinningStrategy","indexArr","rows","children","coord","classList","add","paintOverWinCells","win","crossWins","document","querySelector","zerosWins","playerMoveNumber","n","moveNumber","winCounterForCross","winCounterForZeros","resetPlayingField","gameMenu","innerHTML","resetPlayingMatrix","i","length","resetRow","row","createMatrix","result","push","Array","fill","transposeMatrix","m","map","x","getIndexWinRightDiagonal","indexWinCells","indexForCell","j","join","getIndexWinLeftDiagonal","indexRowI","counter","getIndexWinRow","indexRow","indexJ","forEach","el","indArr","getIndexWinColumn","split","Number","event","fieldOfZeros","target","contains","fieldOfZerosTranspone","cell","playButton3x3","playButtonNxN","buttonPlayAgain","restartButton","conditionForNxN","goButton","makeTabActive","btn","activeBtn","toggle","remove","createPlayingField","tr","createElement","td","content","cloneNode","firstElementChild","dataset","index","appendChild","addEventListener","e","value","alert","className","resetGameCells"],"sourceRoot":""}