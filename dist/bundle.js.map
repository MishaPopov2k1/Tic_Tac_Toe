{"version":3,"file":"./bundle.js","mappings":"mBAEO,SAASA,EAAkBC,EAAYC,GAC5C,MAAMC,EAAOD,EAAaE,SAE1B,IAAK,MAAMC,KAASJ,EACLE,EAAKE,EAAM,IAAID,SAASC,EAAM,IACtCC,UAAUC,IAAI,qBCDvB,MAAMC,EAAYC,SAASC,cAAc,yBACnCC,EAAYF,SAASC,cAAc,yBACnCE,EAAmBH,SAASC,cAAc,wBAKzC,IAAIG,EAAI,EACJC,EAAI,EAEXC,EAAa,EACbC,EAAqB,EACrBC,EAAqB,EAGdC,GAAM,EAcV,SAASC,EAAkBjB,EAAckB,GAC9ClB,EAAamB,UAAY,GACzBD,EAASd,UAAUC,IAAI,UACvBW,GAAM,EACNH,EAAa,EAGR,SAASO,EAAmBC,GACjC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IAC9BE,EAASH,EAAIC,IAEf,OAAOD,EAET,SAASG,EAASC,GAChB,IAAK,IAAIH,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAC9BG,EAAIH,GAAK,EAEX,OAAOG,EAeF,SAASC,EAAaf,GAC3B,MAAMgB,EAAS,GAEf,IAAK,IAAIL,EAAI,EAAGA,EAAIX,EAAGW,IACrBK,EAAOC,KAAK,IAAIC,MAAMlB,GAAGmB,KAAK,IAEhC,OAAOH,EAGT,SAASI,EAAoBC,EAAeC,EAAQC,EAAmBC,GACrE,MACEC,aAAa,KACXC,EAAI,OACJC,GACD,qBACDC,GACEP,EAEJ,IAAIQ,EAAoB,GAExB,IAAK,IAAIlB,EAAI,EAAGmB,EAAU,EAAGhB,EAAMY,EAAMK,EAAWJ,EAAQhB,EAAIW,EAAOI,GAAMd,OAAQD,IAAK,CACxF,GAAIG,GAAOQ,EAAOI,GAAMd,QAChBE,EAAM,GACNiB,GAAYT,EAAOI,GAAMd,QACzBmB,EAAW,EACjB,OAAO,KACF,GAA6B,GAAzBT,EAAOR,GAAKiB,IAMrB,GALAF,EAAkBZ,KAAK,CAACH,EAAKiB,IAC7BD,IACAhB,EAAMS,EAAkBT,GACxBiB,EAAWP,EAAuBO,GAE9BD,GAAWF,EACb,OAAOC,OAGTA,EAAoB,GACpBC,EAAU,EACVhB,EAAMS,EAAkBT,GACxBiB,EAAWP,EAAuBO,GAGtC,OAAO,KA0FT,SAASC,EAAYX,EAAeC,GAClC,MAAM,aACJjC,GACEgC,EAEEY,EAjDR,SAAmBZ,EAAeC,GAChC,MACEG,aAAa,KACXC,EAAI,OACJC,GACD,qBACDC,GACEP,EAEJ,IAAIQ,EAAoB,GAExB,IAAK,IAAIK,EAAU,EAAGJ,EAAU,EAAGI,EAAUZ,EAAOI,GAAMd,OAAQsB,IAChE,GAA6B,GAAzBZ,EAAOI,GAAMQ,IAIf,GAHAL,EAAkBZ,KAAK,CAACS,EAAMQ,IAC9BJ,IAEIA,GAAWF,EACb,OAAOC,OAGTA,EAAoB,GACpBC,EAAU,EAIdD,EAAoB,GAEpB,IAAK,IAAIM,EAAU,EAAGL,EAAU,EAAGK,EAAUb,EAAOK,GAAQf,OAAQuB,IAClE,GAA+B,GAA3Bb,EAAOa,GAASR,IAIlB,GAHAE,EAAkBZ,KAAK,CAACkB,EAASR,IACjCG,IAEIA,GAAWF,EACb,OAAOC,OAGTA,EAAoB,GACpBC,EAAU,EAId,OAAO,KAQWM,CAAUf,EAAeC,GACrCe,EA7FR,SAAuBhB,EAAeC,GACpC,MAAMgB,EAAalB,EAAoBC,EAAeC,GAAQ,SAASR,GACrE,QAASA,KACR,SAASiB,GACV,QAASA,KAGX,GAAIO,EACF,OAAOA,EAGT,MAAMC,EAAcnB,EAAoBC,EAAeC,GAAQ,SAASR,GACtE,QAASA,KACR,SAASiB,GACV,QAASA,KAGX,GAAIQ,EACF,OAAOA,EAGT,MAAMC,EAAapB,EAAoBC,EAAeC,GAAQ,SAASR,GACrE,QAASA,KACR,SAASiB,GACV,QAASA,KAGX,OAAIS,IAIgBpB,EAAoBC,EAAeC,GAAQ,SAASR,GACtE,QAASA,KACR,SAASiB,GACV,QAASA,WAGX,GAwDuBU,CAAcpB,EAAeC,GAEpD,OAAIW,GACF9C,EAAkB8C,EAAW5C,GACtBgB,GAAM,KAGXgC,IACFlD,EAAkBkD,EAAgBhD,GAC3BgB,GAAM,GAMV,SAAS,EAAWgB,GACzB,IAAY,IAARhB,EACF,OAEF,MAAM,KACJqC,EACAjB,aAAa,KACXC,EAAI,OACJC,GAEFgB,QAAQ,QACNC,EAAO,MACPC,IAEAxB,EAEJ,GAAIqB,EAAKjD,UAAUqD,SAAS,iBAAkBJ,EAAKjD,UAAUqD,SAAS,UACpE,OAEFJ,EAAKjD,UAAUC,IAAI,UAEfQ,GACFwC,EAAKlC,UAxOY,uEAyOjBqC,EAAMnB,GAAMC,GAAU,EACtB5B,EAAiBS,UAAY,qBAE7BkC,EAAKlC,UA3Oa,0EA4OlBoC,EAAQlB,GAAMC,GAAU,EACxB5B,EAAiBS,UAAY,kBAG/BN,GAAcA,EAEd,MAAM6C,EAAmB1B,EAAcsB,OAAOC,QACxCI,EAAiB3B,EAAcsB,OAAOE,OAES,IAAjDb,EAAYX,EAAe0B,IAC7BhD,EAAiBS,UAAY,sBAC7BL,IACAR,EAAUa,UAAY,GAAGL,MAC+B,IAA/C6B,EAAYX,EAAe2B,KACpCjD,EAAiBS,UAAY,oBAC7BJ,IACAN,EAAUU,UAAY,GAAGJ,KCvQ7B,MAAM6C,EAAQrD,SAASC,cAAc,uBAenCqD,MAAM,8BACDC,MAbQ,SAASC,GACtB,OAAwB,MAApBA,EAASC,OACJC,QAAQC,OAAO,IAAIC,MAAMJ,EAASK,aAEpCH,QAAQI,QAAQN,MAUlBD,MAPM,SAASC,GACpB,OAAOA,EAASO,UAOXR,MAAK,SAASS,GACbA,EAAMC,KAAKC,MAAMF,GACjBX,EAAMzC,UAAYoD,KAEnBG,OAAM,SAASC,GACdC,QAAQC,IAAIF,MCRb,MAAM3E,EAAeO,SAASC,cAAc,mBAE7CU,EAAWX,SAASC,cAAc,iBAElC6C,EAAO9C,SAASC,cAAc,SAE9BsE,EAAgBvE,SAASC,cAAc,oBACvCuE,EAAgBxE,SAASC,cAAc,oBACvCwE,EAAkBzE,SAASC,cAAc,sBACzCyE,EAAgB1E,SAASC,cAAc,gBAEvC0E,EAAkB3E,SAASC,cAAc,sBACzC2E,EAAW5E,SAASC,cAAc,WAGxC,IAAI,EAAiB,GACjB4E,EAAe,GAOnB,SAASC,EAAcC,GACrB,MACMC,EADOhF,SAASC,cAAc,cACbA,cAAc,WAErC,GAAI8E,EAAIlF,UAAUqD,SAAS,eACzB6B,EAAIlF,UAAUoF,OAAO,oBAIvB,GAAID,EAAW,CACb,GAAID,IAAQC,EAGV,OAFAA,EAAUnF,UAAUqF,OAAO,eAC3BxE,EAAkBjB,EAAckB,GAGhCqE,EAAUnF,UAAUqF,OAAO,UAC3BH,EAAIlF,UAAUC,IAAI,eAGpBiF,EAAIlF,UAAUC,IAAI,UAKtB,SAASqF,EAAmB1F,EAAcW,EAAG0C,EAAMzC,EAAG0E,GACpD,EAAiB5D,EAAaf,GAC9ByE,EAAe1D,EAAaf,GAG5B,IAAK,IAAIW,EAAI,EAAGA,EAAIX,EAAGW,IAAK,CAC1B,MAAMqE,EAAKpF,SAASqF,cAAc,MAElC,IAAK,IAAIC,EAAI,EAAGA,EAAIlF,EAAGkF,IAAK,CAC1B,MAAMC,EAAKzC,EAAK0C,QAAQC,WAAU,GAAMC,kBAExCH,EAAGI,QAAQC,MAAQ,GAAG7E,IAAIuE,IAC1B,MAAM7D,EAAgB,CACpBqB,KAAM+C,MACNhE,YAAa,CACXC,KAAMf,EACNgB,OAAQuD,GAEVvC,OAAQ,CACNC,QAAS,EACTC,MAAO4B,GAGTpF,aAAAA,EACAuC,qBAAsB3B,GAGxB+E,EAAGU,YAAYP,GAEfA,EAAGQ,iBAAiB,SAAUF,IAC5BpE,EAAcqB,KAAO+C,EAAMG,OAC3B,EAAWvE,MAEbhC,EAAaqG,YAAYV,GAG3BzE,EAASd,UAAUqF,OAAO,WAI9BX,EAAcwB,iBAAiB,SAAUE,IF9EvC7F,EAAI,EACJC,EAAI,EE+EJ8E,EAAmB1F,EAAcW,EAAG0C,EAAMzC,EAAG4F,EAAED,QAC/ClB,EAAcmB,EAAED,QAChBrB,EAAgB9E,UAAUC,IAAI,aAIhC0E,EAAcuB,iBAAiB,SAAUE,IACvCvF,EAAkBjB,EAAckB,GAChCmE,EAAcmB,EAAED,QAChBrB,EAAgB9E,UAAUoF,OAAO,aAGnCL,EAASmB,iBAAiB,SAAS,KACjC,MAAMG,EAAYlG,SAASqF,cAAc,SAMzC,GALAV,EAAgBwB,OAAOD,GAEvB9F,GAAMJ,SAASC,cAAc,gBAAgBmG,MAC7C/F,GAAML,SAASC,cAAc,gBAAgBmG,MAEpC,GAALhG,GAAe,GAALC,EAIZ,OAHAgG,MAAM,wBACNH,EAAUI,MAAMC,MAAQ,WACxBL,EAAUM,YAAc,wBAI1B7B,EAAgB9E,UAAUC,IAAI,UAC9B0E,EAAc3E,UAAUC,IAAI,eAE5BqF,EAAmB1F,EAAcW,EAAG0C,EAAMzC,MAG5CqE,EAAcqB,iBAAiB,SAAS,KACtCrB,EAAc7E,UAAUoF,OAAO,UF5G/B1E,EAAqB,EACrBC,EAAqB,EACrBN,EAAUU,UAAY,IACtBb,EAAUa,UAAY,OE6GxB6D,EAAgBsB,iBAAiB,SAAS,KACxC,EAAiBlF,EAAmB,GACpCgE,EAAehE,EAAmBgE,GFxF7B,SAAwBpF,GAC7BgB,GAAM,EACN,IAAK,MAAMS,KAAOzB,EAAaE,SAC7B,IAAK,MAAMmD,KAAQ5B,EAAIvB,SACrBmD,EAAKlC,UAAY,GACjBkC,EAAK2D,UAAY,OAGrBnG,EAAa,EACbH,EAAiBS,UAAY,mBEgF7B8F,CAAejH,O","sources":["webpack://tictactoe-2.0/./js/draw.js","webpack://tictactoe-2.0/./js/gameLogic.js","webpack://tictactoe-2.0/./js/getData.js","webpack://tictactoe-2.0/./js/main.js"],"sourcesContent":["\n\nexport function paintOverWinCells(indexArray, playingField) {\n  const rows = playingField.children;\n\n  for (const coord of indexArray) {\n    const cell = rows[coord[0]].children[coord[1]];\n    cell.classList.add('paint__over-green');\n  }\n}\n\nexport function paintOverAllCells(playingField) {\n  // playingField.children[0].children[0].style.backgroundColor = 'yellow';\n\n}\n\n\n","/* eslint-disable camelcase */\nimport {\n  paintOverWinCells,\n\n} from './draw';\n\nconst crossWins = document.querySelector('.game-score-for-cross');\nconst zerosWins = document.querySelector('.game-score-for-zeros');\nconst playerMoveNumber = document.querySelector('.player__move-number');\n\nconst templateZero = '<img class=\"image-symbol zero-img\" src=\"images/zero.png\" alt=\"zero\">';\nconst templateCross = '<img class=\"image-symbol cross-img\" src=\"images/cross.png\" alt=\"cross\">';\n\nexport let n = 0;\nexport let k = 0;\n\nlet moveNumber = 0;\nlet winCounterForCross = 0;\nlet winCounterForZeros = 0;\n// let drawCondition = 0;\n\nexport let win = false;\n\nexport const setGameConditionsFor3x3 = () => {\n  n = 3;\n  k = 3;\n};\n\nexport const resetWinCounter = () => {\n  winCounterForCross = 0;\n  winCounterForZeros = 0;\n  zerosWins.innerHTML = '0';\n  crossWins.innerHTML = '0';\n};\n\nexport function resetPlayingField(playingField, gameMenu) {\n  playingField.innerHTML = '';\n  gameMenu.classList.add('hidden');\n  win = false;\n  moveNumber = 0;\n};\n\nexport function resetPlayingMatrix(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    resetRow(arr[i]);\n  }\n  return arr;\n};\nfunction resetRow(row) {\n  for (let i = 0; i < row.length; i++) {\n    row[i] = 0;\n  }\n  return row;\n};\n\nexport function resetGameCells(playingField) {\n  win = false;\n  for (const row of playingField.children) {\n    for (const cell of row.children) {\n      cell.innerHTML = '';\n      cell.className = 'cell';\n    }\n  }\n  moveNumber = 0;\n  playerMoveNumber.innerHTML = 'Ходят крестики ❌';\n}\n\nexport function createMatrix(n) {\n  const result = [];\n\n  for (let i = 0; i < n; i++) {\n    result.push(new Array(n).fill(0));\n  }\n  return result;\n};\n\nfunction checkDiagonalWinner(gameCellState, matrix, updateRowCallback, updateDiagonalCallback) {\n  const {\n    coordinates: {\n      line,\n      column,\n    },\n    numberOfSymbolsToWin,\n  } = gameCellState;\n\n  let outputCoordinates = [];\n\n  for (let i = 0, counter = 0, row = line, diagonal = column; i < matrix[line].length; i++) {\n    if (row >= matrix[line].length ||\n            row < 0 ||\n            diagonal >= matrix[line].length ||\n            diagonal < 0) {\n      return null;\n    } else if (matrix[row][diagonal] == 1) {\n      outputCoordinates.push([row, diagonal]);\n      counter++;\n      row = updateRowCallback(row);\n      diagonal = updateDiagonalCallback(diagonal);\n\n      if (counter == numberOfSymbolsToWin) {\n        return outputCoordinates;\n      }\n    } else {\n      outputCoordinates = [];\n      counter = 0;\n      row = updateRowCallback(row);\n      diagonal = updateDiagonalCallback(diagonal);\n    }\n  }\n  return null;\n}\n\nfunction checkDiagonal(gameCellState, matrix) {\n  const firstCheck = checkDiagonalWinner(gameCellState, matrix, function(row) {\n    return ++row;\n  }, function(diagonal) {\n    return ++diagonal;\n  });\n\n  if (firstCheck) {\n    return firstCheck;\n  }\n\n  const secondCheck = checkDiagonalWinner(gameCellState, matrix, function(row) {\n    return --row;\n  }, function(diagonal) {\n    return --diagonal;\n  });\n\n  if (secondCheck) {\n    return secondCheck;\n  }\n\n  const thirdCheck = checkDiagonalWinner(gameCellState, matrix, function(row) {\n    return --row;\n  }, function(diagonal) {\n    return ++diagonal;\n  });\n\n  if (thirdCheck) {\n    return thirdCheck;\n  }\n\n  const fourthCheck = checkDiagonalWinner(gameCellState, matrix, function(row) {\n    return ++row;\n  }, function(diagonal) {\n    return --diagonal;\n  });\n\n  if (fourthCheck) {\n    return fourthCheck;\n  }\n}\n\n\nfunction checkLine(gameCellState, matrix) {\n  const {\n    coordinates: {\n      line,\n      column,\n    },\n    numberOfSymbolsToWin,\n  } = gameCellState;\n\n  let outputCoordinates = [];\n\n  for (let j_index = 0, counter = 0; j_index < matrix[line].length; j_index++) {\n    if (matrix[line][j_index] == 1) {\n      outputCoordinates.push([line, j_index]);\n      counter++;\n\n      if (counter == numberOfSymbolsToWin) {\n        return outputCoordinates;\n      }\n    } else {\n      outputCoordinates = [];\n      counter = 0;\n    }\n  }\n\n  outputCoordinates = [];\n\n  for (let i_index = 0, counter = 0; i_index < matrix[column].length; i_index++) {\n    if (matrix[i_index][column] == 1) {\n      outputCoordinates.push([i_index, column]);\n      counter++;\n\n      if (counter == numberOfSymbolsToWin) {\n        return outputCoordinates;\n      }\n    } else {\n      outputCoordinates = [];\n      counter = 0;\n    }\n  }\n\n  return null;\n}\n\nfunction checkWinner(gameCellState, matrix) {\n  const {\n    playingField,\n  } = gameCellState;\n\n  const rowCoords = checkLine(gameCellState, matrix);\n  const diagonalCoords = checkDiagonal(gameCellState, matrix);\n\n  if (rowCoords) {\n    paintOverWinCells(rowCoords, playingField);\n    return win = true;\n  }\n\n  if (diagonalCoords) {\n    paintOverWinCells(diagonalCoords, playingField);\n    return win = true;\n  }\n\n  return false;\n}\n\nexport function updateСell(gameCellState) {\n  if (win === true) {\n    return;\n  }\n  const {\n    cell,\n    coordinates: {\n      line,\n      column,\n    },\n    fields: {\n      crosses,\n      zeros,\n    },\n  } = gameCellState;\n\n  if (cell.classList.contains('image-symbol')|| cell.classList.contains('filled')) {\n    return;\n  }\n  cell.classList.add('filled');\n\n  if (moveNumber) {\n    cell.innerHTML = templateZero;\n    zeros[line][column] = 1;\n    playerMoveNumber.innerHTML = 'Ходят крестики ❌';\n  } else {\n    cell.innerHTML = templateCross;\n    crosses[line][column] = 1;\n    playerMoveNumber.innerHTML = 'Ходят нолики ⭕';\n  }\n\n  moveNumber = !moveNumber;\n\n  const matrixForCrosses = gameCellState.fields.crosses;\n  const matrixForZeros = gameCellState.fields.zeros;\n\n  if (checkWinner(gameCellState, matrixForCrosses) === true) {\n    playerMoveNumber.innerHTML = '❌Победа крестиков!❌';\n    winCounterForCross++;\n    crossWins.innerHTML = `${winCounterForCross}`;\n  } else if (checkWinner(gameCellState, matrixForZeros) === true) {\n    playerMoveNumber.innerHTML = '⭕Победа ноликов!⭕';\n    winCounterForZeros++;\n    zerosWins.innerHTML = `${winCounterForZeros}`;\n  }\n}\n","const title = document.querySelector('.title__tic-tac-toe');\n\n\nconst status = function(response) {\n  if (response.status !== 200) {\n    return Promise.reject(new Error(response.statusText));\n  }\n  return Promise.resolve(response);\n};\n\nconst json = function(response) {\n  return response.json();\n};\n\nexport function getTitle() {\n  fetch('http://localhost:3000/test')\n      .then(status)\n      .then(json)\n      .then(function(data) {\n        data =JSON.parse(data);\n        title.innerHTML = data;\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n}\n\n\n","import {\n  resetWinCounter,\n  resetPlayingField,\n  createMatrix,\n  updateСell,\n  resetPlayingMatrix,\n  resetGameCells,\n  setGameConditionsFor3x3,\n  n,\n  k,\n} from './gameLogic';\n\nimport {getTitle} from './getData.js';\ngetTitle();\n\nexport const playingField = document.querySelector('.playing__field');\n\nconst gameMenu = document.querySelector('.menu-section');\n\nconst cell = document.querySelector('#cell');\n\nconst playButton3x3 = document.querySelector('.button-play-3x3');\nconst playButtonNxN = document.querySelector('.button-play-NxN');\nconst buttonPlayAgain = document.querySelector('.button-play-again');\nconst restartButton = document.querySelector('.img-restart');\n\nconst conditionForNxN = document.querySelector('.condition-for-NxN');\nconst goButton = document.querySelector('.btn-go');\n\n\nlet fieldOfСrosses = [];\nlet fieldOfZeros = [];\n\n/**\n * Функция для работы с табами\n * s\n * @param {HTMLElement} btn\n */\nfunction makeTabActive(btn) {\n  const menu = document.querySelector('.menu-list');\n  const activeBtn = menu.querySelector('.active');\n\n  if (btn.classList.contains('active-game')) {\n    btn.classList.toggle('active-game');\n    return;\n  }\n\n  if (activeBtn) {\n    if (btn === activeBtn) {\n      activeBtn.classList.remove('active');\n      resetPlayingField(playingField, gameMenu);\n      return;\n    } else {\n      activeBtn.classList.remove('active');\n      btn.classList.add('active');\n    }\n  } else {\n    btn.classList.add('active');\n  }\n}\n\n\nfunction createPlayingField(playingField, n, cell, k, btn) {\n  fieldOfСrosses = createMatrix(n);\n  fieldOfZeros = createMatrix(n);\n\n\n  for (let i = 0; i < n; i++) {\n    const tr = document.createElement('tr');\n\n    for (let j = 0; j < n; j++) {\n      const td = cell.content.cloneNode(true).firstElementChild;\n\n      td.dataset.index = `${i}${j}`;\n      const gameCellState = {\n        cell: event,\n        coordinates: {\n          line: i,\n          column: j,\n        },\n        fields: {\n          crosses: fieldOfСrosses,\n          zeros: fieldOfZeros,\n        },\n\n        playingField,\n        numberOfSymbolsToWin: k,\n      };\n\n      tr.appendChild(td);\n\n      td.addEventListener('click', (event) => {\n        gameCellState.cell = event.target;\n        updateСell(gameCellState);\n      });\n      playingField.appendChild(tr);\n    };\n\n    gameMenu.classList.remove('hidden');\n  };\n}\n\nplayButton3x3.addEventListener('click', (e) => {\n  setGameConditionsFor3x3();\n  createPlayingField(playingField, n, cell, k, e.target);\n  makeTabActive(e.target);\n  conditionForNxN.classList.add('hidden');\n});\n\n\nplayButtonNxN.addEventListener('click', (e) => {\n  resetPlayingField(playingField, gameMenu);\n  makeTabActive(e.target);\n  conditionForNxN.classList.toggle('hidden');\n});\n\ngoButton.addEventListener('click', () => {\n  const smallElem = document.createElement('small');\n  conditionForNxN.append(smallElem);\n\n  n = + document.querySelector('.input-for-N').value;\n  k = + document.querySelector('.input-for-K').value;\n\n  if (n == 0 || k == 0) {\n    alert('Некорректные данные!');\n    smallElem.style.color = 'red';\n    smallElem.textContent = 'Некорректные данные!';\n    return;\n  }\n\n  conditionForNxN.classList.add('hidden');\n  playButtonNxN.classList.add('active-game');\n\n  createPlayingField(playingField, n, cell, k, playButtonNxN);\n});\n\nrestartButton.addEventListener('click', () => {\n  restartButton.classList.toggle('rotate');\n  resetWinCounter();\n});\n\nbuttonPlayAgain.addEventListener('click', () => {\n  fieldOfСrosses = resetPlayingMatrix(fieldOfСrosses);\n  fieldOfZeros = resetPlayingMatrix(fieldOfZeros);\n  resetGameCells(playingField);\n});\n"],"names":["paintOverWinCells","indexArray","playingField","rows","children","coord","classList","add","crossWins","document","querySelector","zerosWins","playerMoveNumber","n","k","moveNumber","winCounterForCross","winCounterForZeros","win","resetPlayingField","gameMenu","innerHTML","resetPlayingMatrix","arr","i","length","resetRow","row","createMatrix","result","push","Array","fill","checkDiagonalWinner","gameCellState","matrix","updateRowCallback","updateDiagonalCallback","coordinates","line","column","numberOfSymbolsToWin","outputCoordinates","counter","diagonal","checkWinner","rowCoords","j_index","i_index","checkLine","diagonalCoords","firstCheck","secondCheck","thirdCheck","checkDiagonal","cell","fields","crosses","zeros","contains","matrixForCrosses","matrixForZeros","title","fetch","then","response","status","Promise","reject","Error","statusText","resolve","json","data","JSON","parse","catch","error","console","log","playButton3x3","playButtonNxN","buttonPlayAgain","restartButton","conditionForNxN","goButton","fieldOfZeros","makeTabActive","btn","activeBtn","toggle","remove","createPlayingField","tr","createElement","j","td","content","cloneNode","firstElementChild","dataset","index","event","appendChild","addEventListener","target","e","smallElem","append","value","alert","style","color","textContent","className","resetGameCells"],"sourceRoot":""}