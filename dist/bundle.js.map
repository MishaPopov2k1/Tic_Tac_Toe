{"version":3,"file":"./bundle.js","mappings":"mBA8BO,SAASA,EAAuBC,EAAKC,EAAeC,EAAcC,GAErE,QAAIC,EAA+BJ,EAAKC,EAAeE,KApBpD,SAA2BE,EAAUH,GAExC,IAAII,EAAOJ,EAAaK,SAExB,IAAK,MAAMC,KAASH,EACLC,EAAKE,EAAM,IAAID,SAASC,EAAM,IACpCC,UAAUC,IAAI,qBAgBnBC,CAAkBP,EAA+BJ,EAAKC,EAAeE,GAAID,GAElEU,GAAM,GC7BrB,MAAMC,EAAYC,SAASC,cAAc,yBACnCC,EAAYF,SAASC,cAAc,yBACnCE,EAAmBH,SAASC,cAAc,wBAKzC,IAAIG,EAAI,EACJf,EAAI,EAEXgB,EAAa,EACbC,EAAqB,EACrBC,EAAqB,EAGdT,GAAM,EASV,SAAS,EAAkBV,EAAcoB,GAC5CpB,EAAaqB,UAAY,GACzBD,EAASb,UAAUC,IAAI,UACvBE,GAAM,EACNO,EAAa,EAGV,SAASK,EAAmBxB,GAC/B,IAAK,IAAIyB,EAAI,EAAGA,EAAIzB,EAAI0B,OAAQD,IAE5BE,EAAS3B,EAAIyB,IAEjB,OAAOzB,EAEX,SAAS2B,EAASC,GACd,IAAK,IAAIH,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAC5BG,EAAIH,GAAK,EAEb,OAAOG,EAmBJ,SAASC,EAAaX,GAGzB,IAFA,IAAIY,EAAS,GAEJL,EAAI,EAAGA,EAAIP,EAAGO,IACnBK,EAAOC,KAAK,IAAIC,MAAMd,GAAGe,KAAK,IAElC,OAAOH,EAIX,SAASI,EAAgBC,GACrB,OAAOA,EAAE,GAAGC,KAAI,CAACC,EAAGZ,IAAMU,EAAEC,KAAIC,GAAKA,EAAEZ,OAG3C,SAASa,EAAyBtC,GAE9B,IAAIuC,EAAgB,CAAC,GAAI,GAAI,IACzBC,EAAe,GAEfC,EAAI,EACR,IAAK,IAAIhB,EAAI,EAAGA,EAAIzB,EAAI0B,OAAQD,IAAK,CAEjC,GAAkB,IAAdzB,EAAIyB,GAAGgB,GAOP,OAAuB,KALvBF,EAAcd,GAAG,GAAKA,EACtBc,EAAcd,GAAG,GAAKgB,EACtBA,IAMR,IAAK,IAAIhB,EAAI,EAAGA,EAAIzB,EAAI0B,OAAQD,IAC5Be,EAAaf,GAAKc,EAAcd,GAAGiB,KAAK,IAI5C,OAAOF,EAGX,SAASG,EAAwB3C,GAE7B,IAAIuC,EAAgB,CAAC,GAAI,GAAI,IACzBC,EAAe,GAEfC,EAAI,EACR,IAAK,IAAIhB,EAAI,EAAGA,EAAIzB,EAAI0B,SAET,IAAPD,EAFwBA,IAAK,CAMjC,GAAkB,IAAdzB,EAAIyB,GAAGgB,GAOP,OAAuB,KALvBF,EAAcd,GAAG,GAAKA,EACtBc,EAAcd,GAAG,GAAKgB,EACtBA,IAOR,IAAK,IAAIhB,EAAI,EAAGA,EAAIzB,EAAI0B,OAAQD,IAC5Be,EAAaf,GAAKc,EAAcd,GAAGiB,KAAK,IAI5C,OAAOF,EAIX,SAAS,EAAkBZ,EAAKzB,GAC5ByC,QAAQC,IAAI,QAASjB,EAAKzB,GAE1B,IAAI2C,EAAY,GACZC,EAAU,EAEd,IAAK,IAAItB,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAG5B,GAFAmB,QAAQC,IAAI,UAAWE,EAAS,KAAMnB,EAAIH,GAAI,IAAKA,GAEpC,IAAXG,EAAIH,IAUR,GALe,IAAXG,EAAIH,KACJsB,IACAD,EAAUf,KAAKN,IAGfsB,IAAY5C,EAGZ,OADAyC,QAAQC,IAAI,cAAeC,GACpBA,OAZPC,EAAU,EACVD,EAAY,GAqBpB,OAAO,KASX,SAASE,EAAehD,EAAKG,GAEzB,IAAI8C,EAAW,GACXC,GAAU,EAad,OAXAlD,EAAImD,SAAQ,CAACC,EAAI3B,KACb,IAAI4B,EAAS,EAAkBD,EAAIjD,GAG/BkD,IACAT,QAAQC,IAAI,WAAYQ,GACxBJ,EAAWI,EACXH,EAASzB,OAIF,GAAXyB,EACOD,EAAW,MAGtBjD,EAAImD,SAAQ,CAACC,EAAI3B,KACbwB,EAASxB,GAAK,CAACyB,EAAQD,EAASxB,OAGpCmB,QAAQC,IAAI,WAAYI,GACjBA,GAQX,SAASK,EAAkBrD,EAAeE,GAEtC,IAAI8C,EAAW,GACXC,GAAU,EASd,OAPAjD,EAAckD,SAAQ,CAACC,EAAI3B,KACnB,EAAkB2B,EAAIjD,KACtB8C,EAAW,EAAkBG,EAAIjD,GACjC+C,EAASzB,OAIF,GAAXyB,EACOD,EAAW,MAGtBhD,EAAckD,SAAQ,CAACC,EAAI3B,KACvBwB,EAASxB,IAAM,GAAGyB,IAClBD,EAASxB,GAAKwB,EAASxB,GAAG8B,MAAM,IAAInB,IAAIoB,WAGrCP,GAIJ,SAAS7C,EAA+BJ,EAAKC,EAAeE,GAI/D,OAAIwC,EAAwB3C,GAEN2C,EAAwB3C,GAEnCsC,EAAyBtC,GAEdsC,EAAyBtC,GAEpCgD,EAAehD,EAAKG,GAET6C,EAAehD,EAAKG,GAE/BmD,EAAkBrD,EAAeE,GAEtBmD,EAAkBrD,EAAeE,QAFhD,EASJ,SAAS,EAAWsD,EAAOhC,EAAGgB,EAAG,EAAgBiB,EAAcxD,EAAcC,GAEhF,IAAY,IAARS,EACA,OAGJ,IAAI+C,EAASF,EAAME,OAEdxC,GAMDwC,EAAOpC,UA3QM,uEA4QbmC,EAAajC,GAAGgB,GAAK,EACrBxB,EAAiBM,UAAY,qBAP7BoC,EAAOpC,UArQO,0EAsQd,EAAeE,GAAGgB,GAAK,EACvBxB,EAAiBM,UAAY,kBASjCJ,GAAcA,EAGd,IAAI,EAA0Be,EAAgB,GAC1C0B,EAAwB1B,EAAgBwB,IAE6C,IAArF3D,EAAuB,EAAgB,EAAyBG,EAAcC,IAE9Ec,EAAiBM,UAAY,qBAC7BH,IACAP,EAAUU,UAAY,GAAGH,MAI+D,IAAjFrB,EAAuB2D,EAAcE,EAAuB1D,EAAcC,KAEjFc,EAAiBM,UAAY,mBAC7BF,IACAL,EAAUO,UAAY,GAAGF,KAa7BuB,QAAQC,IAAI,GACZD,QAAQC,IAAIa,GChTT,MAAMxD,EAAeY,SAASC,cAAc,mBAE7CO,EAAWR,SAASC,cAAc,iBAElC8C,EAAO/C,SAASC,cAAc,SAE9B+C,EAAgBhD,SAASC,cAAc,oBACvCgD,EAAgBjD,SAASC,cAAc,oBACvCiD,EAAkBlD,SAASC,cAAc,sBACzCkD,EAAgBnD,SAASC,cAAc,gBAEvCmD,EAAkBpD,SAASC,cAAc,sBACzCoD,EAAWrD,SAASC,cAAc,WAGxC,IAAI,EAAiB,GACjB2C,EAAe,GAEnB,SAASU,EAAiBC,GACtBA,EAAO5D,UAAUC,IAAI,UA0BzB,SAAS4D,EAAmBpE,EAAcgB,EAAG2C,EAAM1D,EAAGoE,GAElD,MAAMC,EAAO1D,SAASC,cAAc,cACpC6B,QAAQC,IAAI,UAAW2B,GACvB,MAAMC,EAAYD,EAAKzD,cAAc,WAGrC,GAFA6B,QAAQC,IAAI,cAAe4B,GAEvBA,EAAW,CAIX,GAFA,EAAkBvE,EAAcoB,GAChCmD,EAAUhE,UAAUiE,OAAO,UACvBH,IAAQE,EACR,OAGAL,EAAiBG,QAIrBH,EAAiBG,GAGrB,EAAiB1C,EAAaX,GAC9BwC,EAAe7B,EAAaX,GAG5B,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAGO,IAAK,CAExB,IAAIkD,EAAK7D,SAAS8D,cAAc,MAEhC,IAAK,IAAInC,EAAI,EAAGA,EAAIvB,EAAGuB,IAAK,CAExB,IAAIoC,EAAKhB,EAAKiB,QAAQC,WAAU,GAAMC,kBAEtCH,EAAGI,QAAQC,MAAQ,GAAGzD,IAAIgB,IAE1BkC,EAAGQ,YAAYN,GAGfA,EAAGO,iBAAiB,SAAU3B,GAAU,EAAWA,EAAOhC,EAAGgB,EAAG,EAAgBiB,EAAcxD,EAAcC,KAGhHD,EAAaiF,YAAYR,GAK7BrD,EAASb,UAAUiE,OAAO,UAI9BZ,EAAcsB,iBAAiB,SAAUC,IAErClF,EAAI,EACHmE,EAAmBpE,EAAc,EAAG2D,EAAM1D,EAAGkF,EAAE1B,QAChDO,EAAgBzD,UAAUC,IAAI,aAIlCqD,EAAcqB,iBAAiB,SAAUC,IAEpC,EAAkBnF,EAAcoB,GAIjC4C,EAAgBzD,UAAUiE,OAAO,aAIrCP,EAASiB,iBAAiB,SAAS,KAE/BlE,GAAMJ,SAASC,cAAc,gBAAgBuE,MAC7CnF,GAAMW,SAASC,cAAc,gBAAgBuE,MAC7C1C,QAAQC,IAAI3B,EAAGf,GACf+D,EAAgBzD,UAAUC,IAAI,UAE9B4D,EAAmBpE,EAAcgB,EAAG2C,EAAM1D,EAAG4D,MAGjDE,EAAcmB,iBAAiB,SAAS,KAEpCnB,EAAcxD,UAAU8E,OAAO,UDjH/BnE,EAAqB,EACrBC,EAAqB,EACrBL,EAAUO,UAAY,IACtBV,EAAUU,UAAY,OCmH1ByC,EAAgBoB,iBAAiB,SAAS,KAEtC,EAAiB5D,EAAmB,GACpCkC,EAAelC,EAAmBkC,GD9F/B,SAAwBxD,GAE3BU,GAAM,EACN,IAAK,MAAMgB,KAAO1B,EAAaK,SAC3B,IAAK,MAAMsD,KAAQjC,EAAIrB,SACnBsD,EAAK2B,iBAAiB/E,UAAUC,IAAI,UACpCmD,EAAKmB,kBAAkBvE,UAAUC,IAAI,UACrCmD,EAAKpD,UAAUiE,OAAO,qBACtBb,EAAKpD,UAAUiE,OAAO,sBAG9BvD,EAAa,EACbF,EAAiBM,UAAY,mBCoF7BkE,CAAevF,O","sources":["webpack://tictactoe-2.0/./js/draw.js","webpack://tictactoe-2.0/./js/gameLogic.js","webpack://tictactoe-2.0/./js/main.js"],"sourcesContent":["import {\n    win,\n    getIndexesOfTheWinningStrategy,\n    k,\n\n} from './gameLogic';\n\n\nexport function drawSymbol(symbol) {\n    symbol.classList.remove('hidden');\n};\n\nexport function paintOverWinCells(indexArr, playingField) {\n\n    let rows = playingField.children;\n\n    for (const coord of indexArr) {\n        let cell = rows[coord[0]].children[coord[1]];\n        cell.classList.add('paint__over-green');\n    }\n\n\n}\n\nexport function paintOverAllCells(playingField) {\n    // playingField.children[0].children[0].style.backgroundColor = 'yellow';\n\n}\n\n\nexport function isPaintOverAllWinCells(arr, arrTransponse, playingField, k) {\n\n    if (getIndexesOfTheWinningStrategy(arr, arrTransponse, k)) {\n\n        paintOverWinCells(getIndexesOfTheWinningStrategy(arr, arrTransponse, k), playingField);\n\n        return win = true;\n\n    } else {\n\n        return false;\n\n    }\n};\n\n","import {\n    drawSymbol,\n    isPaintOverAllWinCells,\n    paintOverWinCells,\n\n} from './draw';\n\nconst crossWins = document.querySelector('.game-score-for-cross');\nconst zerosWins = document.querySelector('.game-score-for-zeros');\nconst playerMoveNumber = document.querySelector('.player__move-number');\n\nconst templateZero = '<img class=\"image-symbol zero-img\" src=\"images/zero.png\" alt=\"zero\">';\nconst templateCross = '<img class=\"image-symbol cross-img\" src=\"images/cross.png\" alt=\"cross\">';\n\nexport let n = 0;\nexport let k = 0;\n\nlet moveNumber = 0,\n    winCounterForCross = 0,\n    winCounterForZeros = 0,\n    drawCondition = 0;\n\nexport let win = false;\n\nexport const resetWinCounter = () => {\n    winCounterForCross = 0;\n    winCounterForZeros = 0;\n    zerosWins.innerHTML = '0';\n    crossWins.innerHTML = '0';\n}\n\nexport function resetPlayingField(playingField, gameMenu) {\n    playingField.innerHTML = '';\n    gameMenu.classList.add('hidden');\n    win = false;\n    moveNumber = 0;\n};\n\nexport function resetPlayingMatrix(arr) {\n    for (let i = 0; i < arr.length; i++) {\n\n        resetRow(arr[i]);\n    }\n    return arr;\n};\nfunction resetRow(row) {\n    for (let i = 0; i < row.length; i++) {\n        row[i] = 0;\n    }\n    return row;\n};\n\nexport function resetGameCells(playingField) {\n\n    win = false;\n    for (const row of playingField.children) {\n        for (const cell of row.children) {\n            cell.lastElementChild.classList.add('hidden');\n            cell.firstElementChild.classList.add('hidden');\n            cell.classList.remove('paint__over-green');\n            cell.classList.remove('paint__over-yellow');\n        }\n    }\n    moveNumber = 0;\n    playerMoveNumber.innerHTML = 'Ходят крестики ❌';\n\n}\n\nexport function createMatrix(n) {\n    var result = [];\n\n    for (var i = 0; i < n; i++) {\n        result.push(new Array(n).fill(0));\n    }\n    return result;\n\n};\n\nfunction transposeMatrix(m) {\n    return m[0].map((x, i) => m.map(x => x[i]));\n}\n\nfunction getIndexWinRightDiagonal(arr) {\n\n    let indexWinCells = [[], [], []];\n    let indexForCell = [];\n\n    let j = 0;\n    for (let i = 0; i < arr.length; i++) {\n\n        if (arr[i][j] === 1) {\n\n            indexWinCells[i][0] = i;\n            indexWinCells[i][1] = j;\n            j++;\n\n        } else {\n            return indexWinCells = null;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        indexForCell[i] = indexWinCells[i].join('');\n\n    }\n\n    return indexForCell;\n}\n\nfunction getIndexWinLeftDiagonal(arr) {\n\n    let indexWinCells = [[], [], []];\n    let indexForCell = [];\n\n    let j = 0;\n    for (let i = 2; i < arr.length; i--) {\n\n        if (i === -1) {\n            break;\n        }\n\n        if (arr[i][j] === 1) {\n\n            indexWinCells[i][0] = i;\n            indexWinCells[i][1] = j\n            j++;\n\n        } else {\n            return indexWinCells = null;\n        }\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        indexForCell[i] = indexWinCells[i].join('');\n\n    }\n\n    return indexForCell;\n}\n\n\nfunction сheckIfWinningRow(row, k) {\n    console.log('row: ', row, k);\n\n    let indexRowI = [];\n    let counter = 0;\n\n    for (let i = 0; i < row.length; i++) {\n        console.log('count: ', counter, 'el', row[i], 'i', i);\n\n        if (row[i] === 0) {\n            counter = 0;\n            indexRowI = [];\n            continue;\n        }\n        if (row[i] === 1) {\n            counter++;\n            indexRowI.push(i);\n\n        }\n        if (counter === k) {\n\n            console.log('indexRowI: ', indexRowI);\n            return indexRowI;\n\n        }\n        // else {\n\n        //     return indexRowI = null;\n\n        // }\n    }\n\n    return null;\n\n}\n\n/**\n * \n * @param {Array} arr \n * @returns \n */\nfunction getIndexWinRow(arr, k) {\n\n    let indexRow = [];\n    let indexJ = -1;\n\n    arr.forEach((el, i) => {\n        let indArr = сheckIfWinningRow(el, k);\n        \n\n        if (indArr) {\n            console.log('indArr: ', indArr);\n            indexRow = indArr;\n            indexJ = i;\n        }\n    });\n\n    if (indexJ == -1) {\n        return indexRow = null;\n    }\n\n    arr.forEach((el, i) => {\n        indexRow[i] = [indexJ, indexRow[i]];\n        //indexRow[i] = indexRow[i].split('').map(Number);\n    });\n    console.log('indexRow', indexRow);\n    return indexRow;\n};\n\n/**\n * \n * @param {Array} arr \n * @returns \n */\nfunction getIndexWinColumn(arrTransponse, k) {\n\n    let indexRow = [];\n    let indexJ = -1;\n\n    arrTransponse.forEach((el, i) => {\n        if (сheckIfWinningRow(el, k)) {\n            indexRow = сheckIfWinningRow(el, k);\n            indexJ = i;\n        }\n    });\n\n    if (indexJ == -1) {\n        return indexRow = null;\n    }\n\n    arrTransponse.forEach((el, i) => {\n        indexRow[i] += `${indexJ}`;\n        indexRow[i] = indexRow[i].split('').map(Number);\n    });\n\n    return indexRow;\n\n};\n\nexport function getIndexesOfTheWinningStrategy(arr, arrTransponse, k) {\n\n    let indexArr = [];\n\n    if (getIndexWinLeftDiagonal(arr)) {\n\n        return indexArr = getIndexWinLeftDiagonal(arr);\n\n    } else if (getIndexWinRightDiagonal(arr)) {\n\n        return indexArr = getIndexWinRightDiagonal(arr);\n\n    } else if (getIndexWinRow(arr, k)) {\n\n        return indexArr = getIndexWinRow(arr, k);\n\n    } else if (getIndexWinColumn(arrTransponse, k)) {\n\n        return indexArr = getIndexWinColumn(arrTransponse, k);\n\n    }\n\n}\n\n\nexport function updateСell(event, i, j, fieldOfСrosses, fieldOfZeros, playingField, k) {\n\n    if (win === true) {\n        return;\n    }\n\n    let target = event.target;\n\n    if (!moveNumber) {\n        target.innerHTML = templateCross;\n        fieldOfСrosses[i][j] = 1;\n        playerMoveNumber.innerHTML = 'Ходят нолики ⭕';\n\n    } else {\n        target.innerHTML = templateZero;\n        fieldOfZeros[i][j] = 1;\n        playerMoveNumber.innerHTML = 'Ходят крестики ❌';\n\n    }\n\n    moveNumber = !moveNumber;\n\n\n    let fieldOfСrossesTranspone = transposeMatrix(fieldOfСrosses);\n    let fieldOfZerosTranspone = transposeMatrix(fieldOfZeros);\n\n    if (isPaintOverAllWinCells(fieldOfСrosses, fieldOfСrossesTranspone, playingField, k) === true) {\n\n        playerMoveNumber.innerHTML = 'Победили крестики!';\n        winCounterForCross++;\n        crossWins.innerHTML = `${winCounterForCross}`;\n        // win = true;\n\n\n    } else if (isPaintOverAllWinCells(fieldOfZeros, fieldOfZerosTranspone, playingField, k) === true) {\n\n        playerMoveNumber.innerHTML = 'Победили нолики!';\n        winCounterForZeros++;\n        zerosWins.innerHTML = `${winCounterForZeros}`;\n        // win = true;\n\n    } /*else {\n        \n        drawCondition++;\n        \n        if (drawCondition === 9) {\n            playerMoveNumber.innerHTML = 'Ничья!';\n            \n            paintOverAllCells(playingField);\n        }\n    }*/\n    console.log(fieldOfСrosses);\n    console.log(fieldOfZeros);\n\n}\n","import {\n    resetWinCounter,\n    resetPlayingField,\n    createMatrix,\n    updateСell,\n    resetPlayingMatrix,\n    resetGameCells,\n    n,\n    k,\n} from './gameLogic';\n\n\nexport const playingField = document.querySelector('.playing__field');\n\nconst gameMenu = document.querySelector('.menu-section');\n\nconst cell = document.querySelector('#cell');\n\nconst playButton3x3 = document.querySelector('.button-play-3x3');\nconst playButtonNxN = document.querySelector('.button-play-NxN');\nconst buttonPlayAgain = document.querySelector('.button-play-again');\nconst restartButton = document.querySelector('.img-restart');\n\nconst conditionForNxN = document.querySelector('.condition-for-NxN');\nconst goButton = document.querySelector('.btn-go')\n\n\nlet fieldOfСrosses = [];\nlet fieldOfZeros = [];\n\nfunction makeButtonActive(button) {\n    button.classList.add('active');\n\n}\n\nfunction controlActiveBtn(btn) {\n    const menu = document.querySelector('.menu-list');\n    console.log(' menu: ', menu);\n    const activeBtn = menu.querySelector('.active');\n    console.log('activeBtn: ', activeBtn);\n\n    if (activeBtn) {\n\n        resetPlayingField(playingField, gameMenu);\n        activeBtn.classList.remove('active');\n        if (btn === activeBtn) {\n            return;\n        }\n        else {\n            makeButtonActive(btn);\n        }\n\n    } else {\n        makeButtonActive(btn);\n    }\n}\n\nfunction createPlayingField(playingField, n, cell, k, btn) {\n\n    const menu = document.querySelector('.menu-list');\n    console.log(' menu: ', menu);\n    const activeBtn = menu.querySelector('.active');\n    console.log('activeBtn: ', activeBtn);\n\n    if (activeBtn) {\n\n        resetPlayingField(playingField, gameMenu);\n        activeBtn.classList.remove('active');\n        if (btn === activeBtn) {\n            return;\n        }\n        else {\n            makeButtonActive(btn);\n        }\n\n    } else {\n        makeButtonActive(btn);\n    }\n\n    fieldOfСrosses = createMatrix(n);\n    fieldOfZeros = createMatrix(n);\n\n\n    for (let i = 0; i < n; i++) {\n\n        let tr = document.createElement('tr');\n\n        for (let j = 0; j < n; j++) {\n\n            let td = cell.content.cloneNode(true).firstElementChild;\n\n            td.dataset.index = `${i}${j}`;\n\n            tr.appendChild(td)\n\n\n            td.addEventListener('click', (event) => updateСell(event, i, j, fieldOfСrosses, fieldOfZeros, playingField, k));\n\n        }\n        playingField.appendChild(tr);\n\n\n    };\n\n    gameMenu.classList.remove('hidden');\n\n};\n\nplayButton3x3.addEventListener('click', (e) => {\n    //  controlActiveBtn(e.target);\n    k = 3;\n     createPlayingField(playingField, 3, cell, k, e.target);\n    conditionForNxN.classList.add('hidden');\n});\n\n\nplayButtonNxN.addEventListener('click', (e) => {\n\n     resetPlayingField(playingField, gameMenu);\n\n    //  controlActiveBtn(e.target);\n\n    conditionForNxN.classList.remove('hidden');\n\n});\n\ngoButton.addEventListener('click', () => {\n\n    n = + document.querySelector('.input-for-N').value;\n    k = + document.querySelector('.input-for-K').value;\n    console.log(n, k);\n    conditionForNxN.classList.add('hidden');\n\n    createPlayingField(playingField, n, cell, k, playButtonNxN);\n})\n\nrestartButton.addEventListener('click', () => {\n\n    restartButton.classList.toggle('rotate');\n    resetWinCounter();\n\n});\n\nbuttonPlayAgain.addEventListener('click', () => {\n\n    fieldOfСrosses = resetPlayingMatrix(fieldOfСrosses);\n    fieldOfZeros = resetPlayingMatrix(fieldOfZeros);\n\n    resetGameCells(playingField);\n\n});"],"names":["isPaintOverAllWinCells","arr","arrTransponse","playingField","k","getIndexesOfTheWinningStrategy","indexArr","rows","children","coord","classList","add","paintOverWinCells","win","crossWins","document","querySelector","zerosWins","playerMoveNumber","n","moveNumber","winCounterForCross","winCounterForZeros","gameMenu","innerHTML","resetPlayingMatrix","i","length","resetRow","row","createMatrix","result","push","Array","fill","transposeMatrix","m","map","x","getIndexWinRightDiagonal","indexWinCells","indexForCell","j","join","getIndexWinLeftDiagonal","console","log","indexRowI","counter","getIndexWinRow","indexRow","indexJ","forEach","el","indArr","getIndexWinColumn","split","Number","event","fieldOfZeros","target","fieldOfZerosTranspone","cell","playButton3x3","playButtonNxN","buttonPlayAgain","restartButton","conditionForNxN","goButton","makeButtonActive","button","createPlayingField","btn","menu","activeBtn","remove","tr","createElement","td","content","cloneNode","firstElementChild","dataset","index","appendChild","addEventListener","e","value","toggle","lastElementChild","resetGameCells"],"sourceRoot":""}