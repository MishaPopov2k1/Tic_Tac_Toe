{"version":3,"file":"./bundle.js","mappings":"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","sources":["webpack://tictactoe-2.0/./js/draw.js","webpack://tictactoe-2.0/./js/gameLogic.js","webpack://tictactoe-2.0/./js/main.js"],"sourcesContent":["import {\n  win,\n  getIndexesOfTheWinningStrategy,\n  k,\n\n} from './gameLogic';\n\n\nexport function paintOverWinCells(indexArr, playingField) {\n  const rows = playingField.children;\n\n  for (const coord of indexArr) {\n    const cell = rows[coord[0]].children[coord[1]];\n    cell.classList.add('paint__over-green');\n  }\n}\n\nexport function paintOverAllCells(playingField) {\n  // playingField.children[0].children[0].style.backgroundColor = 'yellow';\n\n}\n\n\n","import {\n  paintOverWinCells,\n\n} from './draw';\n\nconst crossWins = document.querySelector('.game-score-for-cross');\nconst zerosWins = document.querySelector('.game-score-for-zeros');\nconst playerMoveNumber = document.querySelector('.player__move-number');\n\nconst templateZero = '<img class=\"image-symbol zero-img\" src=\"images/zero.png\" alt=\"zero\">';\nconst templateCross = '<img class=\"image-symbol cross-img\" src=\"images/cross.png\" alt=\"cross\">';\n\nexport let n = 0;\nexport let k = 0;\n\nlet moveNumber = 0;\nlet winCounterForCross = 0;\nlet winCounterForZeros = 0;\n// let drawCondition = 0;\n\nexport let win = false;\n\nexport const setGameConditionsFor3x3 = () => {\n  n = 3;\n  k = 3;\n};\n\nexport const resetWinCounter = () => {\n  winCounterForCross = 0;\n  winCounterForZeros = 0;\n  zerosWins.innerHTML = '0';\n  crossWins.innerHTML = '0';\n};\n\nexport function resetPlayingField(playingField, gameMenu) {\n  playingField.innerHTML = '';\n  gameMenu.classList.add('hidden');\n  win = false;\n  moveNumber = 0;\n};\n\nexport function resetPlayingMatrix(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    resetRow(arr[i]);\n  }\n  return arr;\n};\nfunction resetRow(row) {\n  for (let i = 0; i < row.length; i++) {\n    row[i] = 0;\n  }\n  return row;\n};\n\nexport function resetGameCells(playingField) {\n  win = false;\n  for (const row of playingField.children) {\n    for (const cell of row.children) {\n      cell.innerHTML = '';\n      cell.className = 'cell';\n    }\n  }\n  moveNumber = 0;\n  playerMoveNumber.innerHTML = 'Ходят крестики ❌';\n}\n\nexport function createMatrix(n) {\n  const result = [];\n\n  for (let i = 0; i < n; i++) {\n    result.push(new Array(n).fill(0));\n  }\n  return result;\n};\n\nfunction checkDiagonalWinner(matrix, x, y, k, updateRowCallback, updateDiagonalCallback) {\n  let outputCoordinates = [];\n\n  for (let i = 0, counter = 0, row = x, diagonal = y; i < matrix[x].length; i++) {\n    if (row >= matrix[x].length ||\n            row < 0 ||\n            diagonal >= matrix[x].length ||\n            diagonal < 0) {\n      return null;\n    } else if (matrix[row][diagonal] == 1) {\n      outputCoordinates.push([row, diagonal]);\n      counter++;\n      row = updateRowCallback(row);\n      diagonal = updateDiagonalCallback(diagonal);\n\n      if (counter == k) {\n        return outputCoordinates;\n      }\n    } else {\n      outputCoordinates = [];\n      counter = 0;\n      row = updateRowCallback(row);\n      diagonal = updateDiagonalCallback(diagonal);\n    }\n  }\n  return null;\n}\n\nfunction checkDiagonal(matrix, i, j, k) {\n  const firstCheck = checkDiagonalWinner(matrix, i, j, k, function(row) {\n    return ++row;\n  }, function(diagonal) {\n    return ++diagonal;\n  });\n\n  if (firstCheck) {\n    return firstCheck;\n  }\n\n  const secondCheck = checkDiagonalWinner(matrix, i, j, k, function(row) {\n    return --row;\n  }, function(diagonal) {\n    return --diagonal;\n  });\n\n  if (secondCheck) {\n    return secondCheck;\n  }\n\n  const thirdCheck = checkDiagonalWinner(matrix, i, j, k, function(row) {\n    return --row;\n  }, function(diagonal) {\n    return ++diagonal;\n  });\n\n  if (thirdCheck) {\n    return thirdCheck;\n  }\n\n  const fourthCheck = checkDiagonalWinner(matrix, i, j, k, function(row) {\n    return ++row;\n  }, function(diagonal) {\n    return --diagonal;\n  });\n\n  if (fourthCheck) {\n    return fourthCheck;\n  }\n}\n\n\n/* function checkDiagonal(matrix, i, j, k) {\n    let outputCoordinates = [];\n\n    for (let i_index = 0, counter = 0, row = i, diagonal = j; i_index < matrix[i].length; i_index++, row++, diagonal++) {\n        if (row >= matrix[i].length ||\n            row < 0 ||\n            diagonal >= matrix[i].length ||\n            diagonal < 0) {\n            break;\n        } else if (matrix[row][diagonal] == 1) {\n            outputCoordinates.push([row, diagonal]);\n            counter++;\n\n            if (counter == k) {\n                return outputCoordinates;\n            }\n        } else {\n            outputCoordinates = [];\n            counter = 0;\n        }\n    }\n\n    outputCoordinates = [];\n\n    for (let i_index = 0, counter = 0, row = i, diagonal = j; i_index < matrix[i].length; i_index++, row--, diagonal--) {\n        if (row >= matrix[i].length ||\n            row < 0 ||\n            diagonal >= matrix[i].length ||\n            diagonal < 0) {\n            break;\n        } else if (matrix[row][diagonal] == 1) {\n            outputCoordinates.push([row, diagonal]);\n            counter++;\n\n            if (counter == k) {\n                return outputCoordinates;\n            }\n        } else {\n            outputCoordinates = [];\n            counter = 0;\n        }\n    }\n\n    outputCoordinates = [];\n\n    for (let i_index = 0, counter = 0, row = i, diagonal = j; i_index < matrix[i].length; i_index++, row--, diagonal++) {\n        if (row >= matrix[i].length ||\n            row < 0 ||\n            diagonal >= matrix[i].length ||\n            diagonal < 0) {\n            break;\n        } else if (matrix[row][diagonal] == 1) {\n            outputCoordinates.push([row, diagonal]);\n            counter++;\n\n            if (counter == k) {\n                return outputCoordinates;\n            }\n        } else {\n            outputCoordinates = [];\n            counter = 0;\n        }\n    }\n\n    outputCoordinates = [];\n\n    for (let i_index = 0, counter = 0, row = i, diagonal = j; i_index < matrix[i].length; i_index++, row++, diagonal--) {\n        if (row >= matrix[i].length ||\n            row < 0 ||\n            diagonal >= matrix[i].length ||\n            diagonal < 0) {\n            break;\n        } else if (matrix[row][diagonal] == 1) {\n            outputCoordinates.push([row, diagonal]);\n            counter++;\n\n            if (counter == k) {\n                return outputCoordinates;\n            }\n        } else {\n            outputCoordinates = [];\n            counter = 0;\n        }\n    }\n\n    return null;\n}*/\n\nfunction checkLine(matrix, i, j, k) {\n  let outputCoordinates = [];\n\n  for (let j_index = 0, counter = 0; j_index < matrix[i].length; j_index++) {\n    if (matrix[i][j_index] == 1) {\n      outputCoordinates.push([i, j_index]);\n      counter++;\n\n      if (counter == k) {\n        return outputCoordinates;\n      }\n    } else {\n      outputCoordinates = [];\n      counter = 0;\n    }\n  }\n\n  outputCoordinates = [];\n\n  for (let i_index = 0, counter = 0; i_index < matrix[j].length; i_index++) {\n    if (matrix[i_index][j] == 1) {\n      outputCoordinates.push([i_index, j]);\n      counter++;\n\n      if (counter == k) {\n        return outputCoordinates;\n      }\n    } else {\n      outputCoordinates = [];\n      counter = 0;\n    }\n  }\n\n  return null;\n}\n\nfunction checkWinner(matrix, i, j, k, playingField) {\n  const rowCoords = checkLine(matrix, i, j, k);\n  const diagonalCoords = checkDiagonal(matrix, i, j, k);\n\n  if (rowCoords) {\n    paintOverWinCells(rowCoords, playingField);\n    return win = true;\n  }\n\n  if (diagonalCoords) {\n    paintOverWinCells(diagonalCoords, playingField);\n    return win = true;\n  }\n  return false;\n}\n\nexport function updateСell(params) {\n  if (win === true) {\n    return;\n  }\n  const {\n    cell,\n    coordinates: {\n      lineСoordinate,\n      columnCoordinate,\n    },\n    fields: {\n      fieldOfСrosses,\n      fieldOfZeros,\n    },\n    playingField,\n    numberOfSymbolsToWin,\n  } = params;\n\n\n  if (cell.classList.contains('active-cell') || cell.classList.contains('image-symbol')) {\n    return;\n  }\n\n  cell.classList.add('active-cell');\n\n  if (moveNumber) {\n    cell.innerHTML = templateZero;\n    fieldOfZeros[lineСoordinate][columnCoordinate] = 1;\n    playerMoveNumber.innerHTML = 'Ходят крестики ❌';\n  } else {\n    cell.innerHTML = templateCross;\n    fieldOfСrosses[lineСoordinate][columnCoordinate] = 1;\n    playerMoveNumber.innerHTML = 'Ходят нолики ⭕';\n  }\n\n  moveNumber = !moveNumber;\n\n  if (checkWinner(fieldOfСrosses, lineСoordinate, columnCoordinate, numberOfSymbolsToWin, playingField) === true) {\n    playerMoveNumber.innerHTML = '❌Победа крестиков!❌';\n    winCounterForCross++;\n    crossWins.innerHTML = `${winCounterForCross}`;\n  } else if (checkWinner(fieldOfZeros, lineСoordinate, columnCoordinate, numberOfSymbolsToWin, playingField) === true) {\n    playerMoveNumber.innerHTML = '⭕Победа ноликов!⭕';\n    winCounterForZeros++;\n    zerosWins.innerHTML = `${winCounterForZeros}`;\n  }\n}\n","import {\n  resetWinCounter,\n  resetPlayingField,\n  createMatrix,\n  updateСell,\n  resetPlayingMatrix,\n  resetGameCells,\n  setGameConditionsFor3x3,\n  n,\n  k,\n} from './gameLogic';\n\n\nexport const playingField = document.querySelector('.playing__field');\n\nconst gameMenu = document.querySelector('.menu-section');\n\nconst cell = document.querySelector('#cell');\n\nconst playButton3x3 = document.querySelector('.button-play-3x3');\nconst playButtonNxN = document.querySelector('.button-play-NxN');\nconst buttonPlayAgain = document.querySelector('.button-play-again');\nconst restartButton = document.querySelector('.img-restart');\n\nconst conditionForNxN = document.querySelector('.condition-for-NxN');\nconst goButton = document.querySelector('.btn-go');\n\n\nlet fieldOfСrosses = [];\nlet fieldOfZeros = [];\n\n/**\n * Функция для работы с табами\n * s\n * @param {HTMLElement} btn\n */\nfunction makeTabActive(btn) {\n  const menu = document.querySelector('.menu-list');\n  const activeBtn = menu.querySelector('.active');\n\n  if (btn.classList.contains('active-game')) {\n    btn.classList.toggle('active-game');\n    return;\n  }\n\n  if (activeBtn) {\n    if (btn === activeBtn) {\n      activeBtn.classList.remove('active');\n      resetPlayingField(playingField, gameMenu);\n      return;\n    } else {\n      activeBtn.classList.remove('active');\n      btn.classList.add('active');\n    }\n  } else {\n    btn.classList.add('active');\n  }\n}\n\n\nfunction createPlayingField(playingField, n, cell, k, btn) {\n  fieldOfСrosses = createMatrix(n);\n  fieldOfZeros = createMatrix(n);\n\n\n  for (let i = 0; i < n; i++) {\n    const tr = document.createElement('tr');\n\n    for (let j = 0; j < n; j++) {\n      const td = cell.content.cloneNode(true).firstElementChild;\n\n      td.dataset.index = `${i}${j}`;\n      const params = {\n        cell: event,\n        coordinates: {\n          lineСoordinate: i,\n          columnCoordinate: j,\n        },\n        fields: {\n          fieldOfСrosses: fieldOfСrosses,\n          fieldOfZeros: fieldOfZeros,\n        },\n\n        playingField,\n        numberOfSymbolsToWin: k,\n      };\n\n      params.coordinates.lineСoordinate = i;\n      params.coordinates.columnCoordinate = j;\n      params.numberOfSymbolsToWin = k;\n      tr.appendChild(td);\n\n      td.addEventListener('click', (event) => {\n        params.cell = event.target;\n        updateСell(params);\n      });\n      playingField.appendChild(tr);\n    };\n\n    gameMenu.classList.remove('hidden');\n  };\n}\n\nplayButton3x3.addEventListener('click', (e) => {\n  setGameConditionsFor3x3();\n  createPlayingField(playingField, n, cell, k, e.target);\n  makeTabActive(e.target);\n  conditionForNxN.classList.add('hidden');\n});\n\n\nplayButtonNxN.addEventListener('click', (e) => {\n  resetPlayingField(playingField, gameMenu);\n  makeTabActive(e.target);\n  conditionForNxN.classList.toggle('hidden');\n});\n\ngoButton.addEventListener('click', () => {\n  const smallElem = document.createElement('small');\n  conditionForNxN.append(smallElem);\n\n  n = + document.querySelector('.input-for-N').value;\n  k = + document.querySelector('.input-for-K').value;\n\n  if (n == 0 || k == 0) {\n    alert('Некорректные данные!');\n    smallElem.style.color = 'red';\n    smallElem.textContent = 'Некорректные данные!';\n    return;\n  }\n\n  conditionForNxN.classList.add('hidden');\n  playButtonNxN.classList.add('active-game');\n\n  createPlayingField(playingField, n, cell, k, playButtonNxN);\n});\n\nrestartButton.addEventListener('click', () => {\n  restartButton.classList.toggle('rotate');\n  resetWinCounter();\n});\n\nbuttonPlayAgain.addEventListener('click', () => {\n  fieldOfСrosses = resetPlayingMatrix(fieldOfСrosses);\n  fieldOfZeros = resetPlayingMatrix(fieldOfZeros);\n  resetGameCells(playingField);\n});\n"],"names":["paintOverWinCells","indexArr","playingField","rows","children","coord","classList","add","crossWins","document","querySelector","zerosWins","playerMoveNumber","n","k","moveNumber","winCounterForCross","winCounterForZeros","win","resetPlayingField","gameMenu","innerHTML","resetPlayingMatrix","arr","i","length","resetRow","row","createMatrix","result","push","Array","fill","checkDiagonalWinner","matrix","x","y","updateRowCallback","updateDiagonalCallback","outputCoordinates","counter","diagonal","checkWinner","j","rowCoords","j_index","i_index","checkLine","diagonalCoords","firstCheck","secondCheck","thirdCheck","checkDiagonal","params","cell","coordinates","columnCoordinate","fields","fieldOfZeros","numberOfSymbolsToWin","contains","playButton3x3","playButtonNxN","buttonPlayAgain","restartButton","conditionForNxN","goButton","makeTabActive","btn","activeBtn","toggle","remove","createPlayingField","tr","createElement","td","content","cloneNode","firstElementChild","dataset","index","event","appendChild","addEventListener","target","e","smallElem","append","value","alert","style","color","textContent","className","resetGameCells"],"sourceRoot":""}